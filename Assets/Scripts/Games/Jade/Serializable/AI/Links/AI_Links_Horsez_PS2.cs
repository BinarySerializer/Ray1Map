using System;
using System.Collections.Generic;
using System.Linq;

namespace Ray1Map.Jade {
	public class AI_Links_Horsez_PS2 : AI_Links_PoP_SoT_PS2_Proto {
		protected override void InitFunctionDefs() {
			base.InitFunctionDefs();

			#region Function Defs (Unnamed)
			uint[] overrides = new uint[] {
				0x311C52C,
				0x311C52E,
				0x311C52F,
				0x311C1AE,
				0x311C19A,
				0x11037D8D,
				0x1102E6E8,
				0x1102E6EC,
				0x1102E6EE,
				0x1102E6EF,
				0x1102E6A6,
				0x1102E6B2,
				0x1102E6B3,
				0x110149A6,
				0x110149AA,
				0x110149AC,
				0x110149AD,
				0x1101498C,
				0x11014990,
				0x11014992,
				0x11014993,
				0x2400EDCF,
				0x110149EC,
				0x110149EE,
				0x110149EF,
				0x2400B8D5,
				0x2400B8D9,
				0x2400B8EF,
				0x110147DE,
				0x110147A8,
				0x2400F78E,
				0x11014852,
				0x11014854,
				0x11014855,
				0x110145FF,
				0x11014601,
				0x11014602,
				0x110145E7,
				0x110145E9,
				0x110145EA,
				0x11014829,
				0x1101482B,
				0x1101482C,
				0x11014BF4,
				0x11014BF8,
				0x11014576,
				0x1101457A,
				0x1101457C,
				0x1101457D,
				0x11014B9A,
				0x11014572,
				0x110145C4,
				0x110145C8,
				0x110145CA,
				0x110145CB,
				0x1101490C,
				0x1101490E,
				0x1101490F,
				0x110148F4,
				0x110148F6,
				0x110148F7,
				0x110148D3,
				0x110148D5,
				0x110148D6,
				0x110148BB,
				0x110148BD,
				0x110148BE,
				0x110148A3,
				0x110148A5,
				0x110148A6,
				0x1101488D,
				0x1101488E,
				0x311C576,
				0x11014924,
				0x11014925,
				0x11014926,
				0x11014927,
				0x11014513,
				0x11014517,
				0x1101465D,
				0x11014661,
				0x11014663,
				0x11014664,
				0x11012811,
				0x11012815,
				0x11014811,
				0x11014813,
				0x11014814,
				0x110147F6,
				0x110147F8,
				0x110147FE,
				0x11036C6B,
				0x11014954,
				0x11014956,
				0x11014957,
				0x1101493E,
				0x1101493F,
				0x311C578,
				0x11014C0A,
				0x11014C0E,
				0x1102E68E,
				0x1102E69A,
				0x1102E69B,
				0x110144FF,
				0x11014501,
				0x11014502,
				0x11014727,
				0x11014729,
				0x1101472A,
				0x110146B7,
				0x11014694,
				0x11014698,
				0x1101469A,
				0x1101469B,
				0x110146CD,
				0x2400B923,
				0x2400B927,
				0x2400B947,
				0x11014675,
				0x11014679,
				0x1101467B,
				0x1101467C,
				0x11014235,
				0x11014239,
				0x110145AD,
				0x11014596,
				0x1101459A,
				0x1101459C,
				0x1101459D,
				0x11014298,
				0x1101429A,
				0x1101429B,
				0x11024A19,
				0x11024A30,
				0x11014BA5,
				0x11014A0D,
				0x11014A11,
				0x11014A1F,
				0x11014873,
				0x11014875,
				0x11014876,
				0x11014251,
				0x11014255,
				0x2400B95A,
				0x2400B95E,
				0x1101426A,
				0x1101426E,
				0x2400B971,
				0x2400B975,
				0x110134B5,
				0x110134B9,
				0x11014683,
				0x11014684,
				0x11014759,
				0x1101475B,
				0x1101475C,
				0x11014778,
				0x11014A1D,
				0x110146FD,
				0x11014701,
				0x110146E3,
				0x110146E7,
				0x110146E9,
				0x110146EA,
				0x1101473F,
				0x11014741,
				0x11014742,
				0x11013494,
				0x110144CB,
				0x110144CF,
				0x110144D1,
				0x110144D2,
				0x110144E3,
				0x110144E7,
				0x110144E9,
				0x110144EA,
				0x11014627,
				0x1101462B,
				0x1101462D,
				0x1101462E,
				0x11014C21,
				0x11014C25,
				0x11014974,
				0x11014976,
				0x11014977,
				0x1101452E,
				0x11014532,
				0x11014534,
				0x11014535,
				0x2400BE03,
				0x1101A93A,
				0x1101A942,
				0x1101A943,
				0x24012CD1,
				0x110142AD,
				0x110142B1,
				0x110142B3,
				0x110142B4,
				0x110144B1,
				0x110144B5,
				0x110144B7,
				0x110144B8,
				0x1101419A,
				0x1101419E,
				0x11014520,
				0x11014521,
				0x11036A00,
				0x11036A04,
				0x11036A0E,
				0x11036A0F,
				0x110369F0,
				0x110369F1,
				0x1101464A,
				0x310C093,
				0x1101A958,
				0x11014BD7,
				0x11014BDB,
				0x11014BBB,
				0x11014BBF,
				0x14001658,
				0x11014547,
				0x1101454B,
				0x1101454D,
				0x1101454E,
				0xE005BEA,
				0xE005BEB,
				0xE005BEC,
				0xD001FB6,
				0xE005A0F,
				0xE005A10,
				0x140000D2,
				0x140000D4,
				0xE005424,
				0x3096C52,
				0x3096C55,
				0x3096C56,
				0xF047257,
				0x3096C3F,
				0x3096C42,
				0x3096C43,
				0x3096C5A,
				0x300002F,
				0x3000034,
				0x5801730,
				0x5801733,
				0x5801734,
				0x58016F6,
				0x5801710,
				0x5801711,
				0x5801713,
				0x58016F2,
				0x58016F3,
				0xFFFFFFFF
			};
			#endregion

			HashSet<uint> fdLookup = new HashSet<uint>(FunctionDefs.Select(fd => fd.Key));
			List<uint> addedKeys = new List<uint>();
			foreach (var u in overrides) {
				if(fdLookup.Contains(u)) continue;
				addedKeys.Add(u);
			}
			if (addedKeys.Any()) {
				var fdefs = FunctionDefs;
				int len = fdefs.Length;
				Array.Resize(ref fdefs, len + addedKeys.Count);
				for (int i = 0; i < addedKeys.Count; i++) {
					fdefs[len + i] = new AI_FunctionDef(addedKeys[i], $"Custom_{addedKeys[i]:X8}");
				}
				FunctionDefs = fdefs;
			}
		}
	}
}
